{"title":"我有特殊的输入输出技巧","slug":"我有特殊的输入输出技巧","date":"2018-10-09T05:11:46.000Z","updated":"2018-10-09T06:06:22.545Z","comments":true,"excerpt":"","content":"<p>在现在这个卡常遍地走的时代，正常的getchar(),putchar()已经无法满足各大OIer们的需求<br>于是巨佬们就发现了一些叫做fread(),fwrite()的东西<br>想要作死尝试的蒟蒻我就在今天早上<del>Baidu</del>Google了一下这个东西<br>然后就在P1001中WA了好几发。。。<br><del>人生一大污点</del></p>\n<h1 id=\"fread\"><a href=\"#fread\" class=\"headerlink\" title=\"fread()\"></a>fread()</h1><p>这个东西可以以字符串形式将输入文件中的东西一块一块的读进来，而且每次读取的速度贼快<br>当然，因为是以字符串形式，你要先定义一个ibuf[]数组来存这块里头读进来的东西</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> _SIZE = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">18</span> | <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> *p1, *p2;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">char</span> ibuf[_SIZE];</span><br></pre></td></tr></table></figure>\n<p>如果你怕读进来的空间不够大，那你可以考虑在重载一个getchar(),然后在里面一小块一小块读</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">getchar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p1 == p2) &#123;</span><br><span class=\"line\">        p2 = (p1 = buf) + fwrite(ibuf, <span class=\"number\">1</span>, _SIZE,<span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p1 == p2) <span class=\"keyword\">return</span> EOF;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *p1++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或者你极其有自信不会爆空间，你也可以这样一次读进来一整个，而且这样会比上面那个快<br>不过这个时候你数组空间当然要开大一点</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> _SIZE = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">26</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ibuf[fread(ibuf, <span class=\"number\">1</span>, _SIZE, <span class=\"built_in\">stdin</span>)] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span> <span class=\"title\">getchar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *p1++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重载好getchar()之后就可以直接用之前那个read()乱水了</p>\n<h1 id=\"fwrite\"><a href=\"#fwrite\" class=\"headerlink\" title=\"fwrite()\"></a>fwrite()</h1><p>这个东西和fread()讲道理差不多。。还是一次性把所有东西全部扔进输出文件里<br>显然我们要开一个obuf[]来存我们要输出的东西</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">putchar</span><span class=\"params\">(<span class=\"keyword\">char</span> c)</span> </span>&#123;</span><br><span class=\"line\">    *p2++ = c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">end</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    fwrite(obuf, <span class=\"number\">1</span>, p2 - obuf, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"template\"><a href=\"#template\" class=\"headerlink\" title=\"template\"></a>template</h1><p>这个东西嘛。。传说可以让你再也不用担心read(),write()里的变量没开大导致爆long long / unsigned long long<br>但我Google了半天发现这东西不能返回值。。只能传址调用<br><del>所以我们又要码风大改了</del></p>\n<p>那我们最后扔一发板子以示友好？</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iostream</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> _SIZE = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">26</span>;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p1, *p2;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ibuf[_SIZE], obuf[_SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\">    iostream() : p1(ibuf), p2(obuf) &#123;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"testdata.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">        freopen(<span class=\"string\">\"testdata1.out\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">        ibuf[fread(ibuf, <span class=\"number\">1</span>, _SIZE, <span class=\"built_in\">stdin</span>)] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~iostream() &#123;</span><br><span class=\"line\">        fwrite(obuf, <span class=\"number\">1</span>, p2 - obuf, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">char</span> <span class=\"title\">getchar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *p1++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> _T&gt;</span><br><span class=\"line\">    iostream &amp; <span class=\"keyword\">operator</span> &gt;&gt; (_T &amp;x) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> c = getchar(); x = <span class=\"number\">0</span>; <span class=\"keyword\">bool</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">'0'</span> || c &gt; <span class=\"string\">'9'</span>) (c == <span class=\"string\">'-'</span>) &amp;&amp; (flag = <span class=\"number\">1</span>), c = getchar();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">'0'</span> &amp;&amp; c &lt;= <span class=\"string\">'9'</span>) x = x * <span class=\"number\">10</span> + c - <span class=\"string\">'0'</span>, c = getchar();</span><br><span class=\"line\">        (flag) &amp;&amp; (x = -x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">putchar</span><span class=\"params\">(<span class=\"keyword\">char</span> x)</span> </span>&#123;</span><br><span class=\"line\">        *p2++ = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> _T&gt;</span><br><span class=\"line\">    iostream &amp; <span class=\"keyword\">operator</span> &lt;&lt; (_T x) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[<span class=\"number\">19</span>]; <span class=\"keyword\">register</span> <span class=\"keyword\">char</span> *p3 = buf;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>), x = -x;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (x) &#123;</span><br><span class=\"line\">                *p3++ = x % <span class=\"number\">10</span> + <span class=\"string\">'0'</span>;</span><br><span class=\"line\">                x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p3 != buf) <span class=\"built_in\">putchar</span>(*--p3);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; IO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","thumbnail":"https://s1.ax1x.com/2018/10/09/iJj9ot.png","categories":[{"name":"算法","path":"api/categories/算法.json"}],"tags":[{"name":"卡常","path":"api/tags/卡常.json"}]}