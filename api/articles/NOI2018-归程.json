{"title":"[NOI2018]归程","slug":"NOI2018-归程","date":"2018-10-11T07:45:11.000Z","updated":"2018-10-11T11:42:03.115Z","comments":true,"excerpt":"","content":"<h1 id=\"题解部分\"><a href=\"#题解部分\" class=\"headerlink\" title=\"题解部分\"></a>题解部分</h1><p><a href=\"https://www.luogu.org/problemnew/show/P4768\" target=\"_blank\" rel=\"noopener\">这里是原题QwQ</a><br>一看到这道题 <del>。。我。。我就不会做了</del> 显然我们要先跑一遍最短路，得到每一个点到1的最短距离<br><strong>然后呢？</strong><br>我们要在这道题中用到一个叫做 <strong>Kruskal重构树</strong> 的黑科技，具体内容可以参照<a href=\"https://www.luogu.org/blog/user9012/ke-lu-si-ka-er-zhong-gou-shu-lve-xie\" target=\"_blank\" rel=\"noopener\">%%%</a></p>\n<p>在学习了这个黑科技之后，我们来考虑一下它所要用在本题中的优秀性质。</p>\n<ul>\n<li><p>对于任意一个非叶子结点，它的优先级小于等于它的子树中任意一个结点</p>\n</li>\n<li><p>换一种说法，我们在树上任选一条链，其上结点优先级具有单调性</p>\n</li>\n</ul>\n<p>简单的说，如果我们以海拔为关键字对边从大到小排序，然后构建出一颗Kruskal重构树，那么对于这颗树上的任意一个结点，如果它是合法的，那么它的子树中任意一个结点都是合法的<br>也就是说，对于我们所查询的结点，我们找到它的深度最浅的并且海拔大于p的祖先，那么在这个祖先的子树中的任意一个结点我们都可以不消耗任何代价到达<br>也就是也就是说，这颗子树中任意一个结点到1的最小代价就是这颗子树中到1最近的那个结点到1的代价<br>$$dis_{u\\in subtree}=\\min_{v\\in subtree}dis_v$$<br><del>没有$\\sum$的题解还能叫题解吗.jpg</del><br>对于如何找到它的满足条件的祖先，我们可以考虑使用我们可爱的倍增算法～～～</p>\n<p>附上代码.png</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt; </span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iostream</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> _SIZE = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">26</span>; </span><br><span class=\"line\">    <span class=\"keyword\">char</span> *p1, *p2;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> ibuf[_SIZE], obuf[_SIZE];</span><br><span class=\"line\"></span><br><span class=\"line\">    iostream() : p1(ibuf), p2(obuf) &#123;</span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> ONLINE_JUDGE</span></span><br><span class=\"line\">        freopen(<span class=\"string\">\"testdata.in\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"built_in\">stdin</span>);</span><br><span class=\"line\">        <span class=\"comment\">//freopen(\"testdata1.out\", \"w\", stdout);</span></span><br><span class=\"line\">        <span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br><span class=\"line\">        ibuf[fread(ibuf, <span class=\"number\">1</span>, _SIZE, <span class=\"built_in\">stdin</span>)] = <span class=\"string\">'\\0'</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ~iostream() &#123;</span><br><span class=\"line\">        fwrite(obuf, <span class=\"number\">1</span>, p2 - obuf, <span class=\"built_in\">stdout</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">char</span> <span class=\"title\">getchar</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *p1++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> _T&gt; </span><br><span class=\"line\">    iostream &amp; <span class=\"keyword\">operator</span> &gt;&gt; (_T &amp;x) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> c = getchar(); x = <span class=\"number\">0</span>; <span class=\"keyword\">bool</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (c &lt; <span class=\"string\">'0'</span> || c &gt; <span class=\"string\">'9'</span>) (c == <span class=\"string\">'-'</span>) &amp;&amp; (flag = <span class=\"number\">1</span>), c = getchar();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (c &gt;= <span class=\"string\">'0'</span> &amp;&amp; c &lt;= <span class=\"string\">'9'</span>) x = x * <span class=\"number\">10</span> + c - <span class=\"string\">'0'</span>, c = getchar();</span><br><span class=\"line\">        (flag) &amp;&amp; (x = -x);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">putchar</span><span class=\"params\">(<span class=\"keyword\">char</span> x)</span> </span>&#123;</span><br><span class=\"line\">        *p2++ = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> _T&gt;</span><br><span class=\"line\">    iostream &amp; <span class=\"keyword\">operator</span> &lt;&lt; (_T x) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">char</span> buf[<span class=\"number\">19</span>  ]; <span class=\"keyword\">register</span> <span class=\"keyword\">char</span> *p3 = buf;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>) <span class=\"built_in\">putchar</span>(<span class=\"string\">'-'</span>), x = -x;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (x) &#123;</span><br><span class=\"line\">                *p3++ = x % <span class=\"number\">10</span> + <span class=\"string\">'0'</span>;</span><br><span class=\"line\">                x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (p3 != buf) <span class=\"built_in\">putchar</span>(*--p3);    </span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"built_in\">putchar</span>(<span class=\"string\">'0'</span>);</span><br><span class=\"line\">        <span class=\"built_in\">putchar</span>(<span class=\"string\">' '</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; IO;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">200009</span>, M = <span class=\"number\">400009</span> ; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Graph</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> head[N], nxt[M &lt;&lt; <span class=\"number\">1</span>], to[M &lt;&lt; <span class=\"number\">1</span>], val[M &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> c)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> u = head[a], v = ++cnt;</span><br><span class=\"line\">        nxt[v] = u, to[v] = b, val[v] = c;</span><br><span class=\"line\">        head[a] = v;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(head, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(head));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(nxt, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(nxt));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(to, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(to));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(val, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(val));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> lim)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= lim; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = head[i]; j; j = nxt[j]) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d -&gt; %d : %d\\n\"</span>, i, to[j], val[j]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> u, v, val;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (Edge a, Edge b) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a.val &gt; b.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> UnionFind &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> f[N &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (f[x]) <span class=\"keyword\">return</span> f[x] = find(f[x]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">        f[a] = f[b] = fa;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(f, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(f));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> Dijkstra &#123; </span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> lson (u &lt;&lt; 1)</span></span><br><span class=\"line\">    <span class=\"meta\">#<span class=\"meta-keyword\">define</span> rson (u &lt;&lt; 1 | 1)</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> dis[N], min[N &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (min[lson] &amp;&amp; min[rson]) min[u] = (dis[min[lson]] &lt; dis[min[rson]]) ? min[lson] : min[rson];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (min[lson]) min[u] = min[lson];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (min[rson]) min[u] = min[rson];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> min[u] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L == R) &#123;</span><br><span class=\"line\">            min[u] = x;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = L + R &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pos &lt;= mid) modify(lson, L, mid, pos, x);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> modify(rson, mid + <span class=\"number\">1</span>, R, pos, x);</span><br><span class=\"line\">        pushup(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Dijkstra</span><span class=\"params\">(<span class=\"keyword\">int</span> s, <span class=\"keyword\">int</span> lim, Graph &amp;graph)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= lim; i++) dis[i] = <span class=\"number\">0x7fffffff</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(min, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(min));</span><br><span class=\"line\">        dis[s] = <span class=\"number\">0</span>, modify(<span class=\"number\">1</span>, <span class=\"number\">1</span>, lim, s, s);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> _i = <span class=\"number\">1</span>; _i &lt;= lim; _i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> u = min[<span class=\"number\">1</span>];</span><br><span class=\"line\">            modify(<span class=\"number\">1</span>, <span class=\"number\">1</span>, lim, u, <span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = graph.head[u]; i; i = graph.nxt[i]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> v = graph.to[i];</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dis[v] &gt; dis[u] + graph.val[i]) &#123;</span><br><span class=\"line\">                    dis[v] = dis[u] + graph.val[i];</span><br><span class=\"line\">                    modify(<span class=\"number\">1</span>, <span class=\"number\">1</span>, lim, v, v);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Kruskal</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> logs = <span class=\"number\">20</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> ch[N &lt;&lt; <span class=\"number\">1</span>][<span class=\"number\">2</span>], val[N &lt;&lt; <span class=\"number\">1</span>], min[N &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> f[N &lt;&lt; <span class=\"number\">1</span>][logs + <span class=\"number\">9</span>];</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= logs; i++) f[u][i] = f[f[u][i - <span class=\"number\">1</span>]][i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!ch[u][<span class=\"number\">0</span>]) min[u] = Dijkstra::dis[u];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            dfs(ch[u][<span class=\"number\">0</span>]), dfs(ch[u][<span class=\"number\">1</span>]);</span><br><span class=\"line\">            min[u] = <span class=\"built_in\">std</span>::min(min[ch[u][<span class=\"number\">0</span>]], min[ch[u][<span class=\"number\">1</span>]]);    </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(Edge *E, <span class=\"keyword\">int</span> lim, <span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">std</span>::sort(E + <span class=\"number\">1</span>, E + <span class=\"number\">1</span> + m);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>; i &lt;= m, j &lt; lim - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> fu = UnionFind::find(E[i].u), fv = UnionFind::find(E[i].v);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (fu == fv) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">            val[lim + j] = E[i].val, f[fu][<span class=\"number\">0</span>] = f[fv][<span class=\"number\">0</span>] = lim + j;</span><br><span class=\"line\">            ch[lim + j][<span class=\"number\">0</span>] = fu, ch[lim + j][<span class=\"number\">1</span>] = fv;</span><br><span class=\"line\">            UnionFind::merge(fu, fv, lim + j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dfs(lim * <span class=\"number\">2</span> - <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = logs; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!f[u][i] || val[f[u][i]] &lt;= p) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            u = f[u][i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min[u];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(ch, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(ch));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(val, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(val));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(f, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(f));</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(min, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(min));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> Test, n, m, q, K, S, lastans;</span><br><span class=\"line\">Edge E[M];</span><br><span class=\"line\">Graph G;</span><br><span class=\"line\">Kruskal T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    lastans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    G.clear();</span><br><span class=\"line\">    T.clear();</span><br><span class=\"line\">    UnionFind::clear();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    IO &gt;&gt; Test;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (Test--) &#123;</span><br><span class=\"line\">        init();</span><br><span class=\"line\">        IO &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> u, v, l, a;</span><br><span class=\"line\">            IO &gt;&gt; u &gt;&gt; v &gt;&gt; l &gt;&gt; a;</span><br><span class=\"line\">            E[i] = (Edge) &#123;u, v, a&#125;;</span><br><span class=\"line\">            G.add(u, v, l), G.add(v, u, l);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Dijkstra::Dijkstra(<span class=\"number\">1</span>, n, G);</span><br><span class=\"line\">        T.build(E, n, m);</span><br><span class=\"line\">        IO &gt;&gt; q &gt;&gt; K &gt;&gt; S;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (q--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> v0, p0, v, p;</span><br><span class=\"line\">            IO &gt;&gt; v0 &gt;&gt; p0;</span><br><span class=\"line\">            v = (v0 + K * lastans - <span class=\"number\">1</span>) % n + <span class=\"number\">1</span>;</span><br><span class=\"line\">            p = (p0 + K * lastans) % (S + <span class=\"number\">1</span>);</span><br><span class=\"line\">            lastans = T.query(v, p);</span><br><span class=\"line\">            IO &lt;&lt; lastans, IO.<span class=\"built_in\">putchar</span>(<span class=\"string\">'\\n'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"吐槽部分\"><a href=\"#吐槽部分\" class=\"headerlink\" title=\"吐槽部分\"></a>吐槽部分</h1><p>首先我想说，封装是个好东西</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>   <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"number\">2</span>   <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"number\">3</span>   <span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">5</span>   <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iostream</span> &#123;</span></span><br><span class=\"line\"><span class=\"number\">53</span>  &#125; IO;</span><br><span class=\"line\"><span class=\"number\">54</span></span><br><span class=\"line\"><span class=\"number\">55</span>  <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">200009</span>, M = <span class=\"number\">400009</span>;</span><br><span class=\"line\"><span class=\"number\">56</span></span><br><span class=\"line\"><span class=\"number\">57</span>  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Graph</span> &#123;</span></span><br><span class=\"line\"><span class=\"number\">82</span>  &#125;;</span><br><span class=\"line\"><span class=\"number\">83</span></span><br><span class=\"line\"><span class=\"number\">84</span>  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Edge</span> &#123;</span></span><br><span class=\"line\"><span class=\"number\">90</span>  &#125;;</span><br><span class=\"line\"><span class=\"number\">91</span></span><br><span class=\"line\"><span class=\"number\">92</span>  <span class=\"keyword\">namespace</span> UnionFind &#123;</span><br><span class=\"line\"><span class=\"number\">107</span> &#125;</span><br><span class=\"line\"><span class=\"number\">108</span></span><br><span class=\"line\"><span class=\"number\">109</span> <span class=\"keyword\">namespace</span> Dijkstra &#123;</span><br><span class=\"line\"><span class=\"number\">147</span> &#125;</span><br><span class=\"line\"><span class=\"number\">148</span></span><br><span class=\"line\"><span class=\"number\">149</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Kruskal</span> &#123;</span></span><br><span class=\"line\"><span class=\"number\">190</span> &#125;;</span><br><span class=\"line\"><span class=\"number\">191</span></span><br><span class=\"line\"><span class=\"number\">192</span> <span class=\"keyword\">int</span> Test, n, m, q, K, S, lastans;</span><br><span class=\"line\"><span class=\"number\">193</span> Edge E[M];</span><br><span class=\"line\"><span class=\"number\">194</span> Graph G;</span><br><span class=\"line\"><span class=\"number\">195</span> Kruskal T;</span><br><span class=\"line\"><span class=\"number\">196</span></span><br><span class=\"line\"><span class=\"number\">197</span> <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"number\">202</span> &#125;</span><br><span class=\"line\"><span class=\"number\">203</span></span><br><span class=\"line\"><span class=\"number\">204</span> <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"><span class=\"number\">228</span> &#125;</span><br></pre></td></tr></table></figure>\n<p>这是我封装之后的代码，是不是炒鸡优美？<br>唯一想让人吐槽的是，仔细观察你会发现，IO部分写了48行，是这篇代码中最长的部分。。。。<br>这道题我在某谷上交了4次，第一次忘了init，第二次忘记清零cnt，第三次忘记清零lastans///<br>然后我发现自己在初赛倒计时两天的时候颓了一天的Kruskal重构树<br>mdzz<br>这道题用上了我两天的积蓄，昨天刚学的线段树优化Dijkstra今天就用上了</p>\n","thumbnail":"https://s1.ax1x.com/2018/10/11/it6Tc8.png","categories":[{"name":"题解","path":"api/categories/题解.json"}],"tags":[{"name":"Kruskal重构树","path":"api/tags/Kruskal重构树.json"},{"name":"Dijkstra","path":"api/tags/Dijkstra.json"}]}